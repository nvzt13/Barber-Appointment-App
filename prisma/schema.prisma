// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?     @map("email_verified")
  image         String?
  role          Role           @default(USER)
  accounts      Account[]
  sessions      Session[]
  appointments  Appointment[]  // Kullanıcı randevuları

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Barber {
  id           String        @id @default(cuid())
  name         String
  image        String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  availableSlots AvailableSlot[]
  appointments Appointment[] // Berber randevuları
    @@map("barber")
}

model Appointment {
  id         String   @id @default(cuid())  // Benzersiz bir ID
  customerId String   // Randevu alan kullanıcının ID'si
  barberId   String   // Hangi ustaya randevu alındığı (Barber ID)
  date       DateTime // Randevu tarihi
  startTime  DateTime // Randevu başlangıç saati
  endTime    DateTime // Randevu bitiş saati
  status     String?  // Randevu durumu (örneğin, confirmed, pending, cancelled)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  barber     Barber   @relation(fields: [barberId], references: [id])  // Berber ile ilişki
  customer   User     @relation(fields: [customerId], references: [id]) // Kullanıcı ile ilişki
  slot       AvailableSlot @relation(fields: [slotId], references: [id]) // Slot ile ilişki
  slotId     String   @unique // Slot ID benzersiz olmalı

  @@map("appointment")
}

model AvailableSlot {
  id        String   @id @default(cuid())
  date      DateTime // Slot tarihi
  startTime DateTime // Slot başlangıç saati
  endTime   DateTime // Slot bitiş saati
  isBooked  Boolean  @default(false)
  barber    Barber   @relation(fields: [barberId], references: [id]) // Berber ile ilişki
  barberId  String
  appointment Appointment? // Eğer randevu varsa o saat randevuyla ilişkilendirilir.
    @@map("vailable-slot")
}